library(tidyverse)
library(patchwork)
#=============================================================================
supplyParams <- c("QSXAgg -- Total Production",
                  "TAreaXAgg -- Total Area",
                  "AnmlNumXAgg -- Animal Numbers",
                  "QMXAgg -- Import",
                  "PPXAgg -- Producer Prices",
                  "PCXAgg -- Consumer Prices",
                  "PEXAgg -- Export Prices",
                  "PWXAgg -- World Prices")
# "TYldXAgg -- Total Yield", - to be calculated after aggregation of production and area
# "AnmlYldXAgg -- Animal Yield", - to be calculated after aggregation of production and area

demandParams <- c("QHDXAgg -- Household Demand",
                  "QEXAgg -- Export",
                  "QLXAgg -- Livestock Feed Demand",
                  "QINTXAgg -- Intermediate Demand",
                  "QOTHRXAgg -- Other Demand",
                  "QDXAgg -- Total Demand")

foodAvailParams <- c("PerCapKCalXAgg",
                     "PerCapKCalCXAgg -- PcKcal by Commodity",
                     "PopulationAtRiskXagg - Pop at Risk of Hunger",
                     "TotalMalnourishedXagg -- Malnurished Children",
                     "PopXAgg -- Population")
# "QMSHXAgg -- Import Share of Demand", - to be calculated after aggregation of imports and total demand
# "ShareAtRiskXagg -- Share at Risk of Hunger", - to be calculated after aggregation of population and pop at risk of hunger

# supply_params <- c("Area",
#                    "Production",
#                    "Yield",
#                    "Animal Numbers",
#                    "Animal Yield")

# demand_params <- c("Household Demand",
#                    "Export",
#                    "Livestock\nFeed Demand",
#                    "Intermediate Demand",
#                    "Other Demand")
# foodSec_params <- c("Availability\n(kcal/capita/day)",
#                     "Share at Risk of Hunger",
#                     "undernourished Children",
#                     "Import Share of Demand")

paramVec <- c(supplyParams,
              demandParams,
              foodAvailParams)

commodVec <- c("CER-Wheat",
               "CER",
               "R&T",
               "PUL",
               "OLS",
               "F&V",
               "AllA")

# forTotKcalPcap <- c("CER", "OLS", "AllA", "R&T",
#                     "F&V", "PUL", "SGR")
#regionVec <- c("SSA", "EUR", "LAC", "NAM", "MEN", "EAP", "SAS", "FSU", "WLD")
#=================================================================
# Import raw IMPACT output file (generated using ReportGen.xlsx)
#-----------------------------------------------------------------
this_folder <- "E:/BSCHIEK/"
# this_subfolder <- "2Blades WSR IMPACT/New run/"
this_subfolder <- "IMPACT3-Model-ver3.3/OutputFiles/Aggregation/"
this_fileName <- "WSR2_ssp2_rcp45.csv"
this_filePath <- paste0(this_folder, this_subfolder, this_fileName)
df_raw <- read.csv(this_filePath, stringsAsFactors = F)
#=================================================================
# Process the raw IMPACT file
#-----------------------------------------------------------------
# Get only the params, commodities, regions, and years you want to look at
df <- subset(df_raw, impactparameter %in% paramVec &
               commodity %in% c(commodVec, "-") &
               year >= 2024)
colnames(df)[which(colnames(df) == "impactparameter")] <- "param"
# HH demand
# Let's use "QHDXAgg -- Household Demand", which is disggregated by commodity
# It is also disaggregated by rural and urban, which Tim says is experimental
# So have to make sure and use the total HH
# The alternative param "QFXAgg -- Household Demand" is aggregated to country level
# which does not allow examination of HH demand for specific commodities
df <- subset(df, param != "QFXAgg -- Household Demand")
# Aggregate rural and urban HH demand
df_hh <- subset(df, param == "QHDXAgg -- Household Demand")
df <- subset(df, param != "QHDXAgg -- Household Demand")
df_hh <- df_hh %>% group_by(param, scenario, commodity,
                            region, year) %>% summarize(Val = sum(Val))
df_hh$productiontype <- "total"
df <- as.data.frame(rbind(df, df_hh[, colnames(df)]))
# Don't need productiontype column anymore
df$productiontype <- NULL
#--------------------------------------------------------------
# Fix parameter names
# Get rid of the weird prefix
df$param <- gsub("^.*\\-- ", "", df$param)
# Get rid of "Total" before "Total Yield", "Total Area", "Total Production"
# ("Total" just means that we are talking about both irrigated and rainfed)
# But keep "Total" for "Total Demand"
indRmTotal <- which(df$param %in% c("Total Yield", "Total Area", "Total Production"))
df$param[indRmTotal] <- gsub("Total ", "", df$param[indRmTotal])
# Fix "PopulationAtRiskXagg - Pop at Risk of Hunger"
df$param <- gsub("PopulationAtRiskXagg - ", "", df$param)
# Fix "PerCapKCalXAgg" (total kcal per capita per day)
df$param[grep("PerCapKCalXAgg", df$param)] <- "Total Availability\n(kcal/capita/day)"
# Fix "PcKcal by Commodity" (kcal per capita per day by commodity)
df$param[grep("PcKcal by Commodity", df$param)] <- "Availability\n(kcal/capita/day)"
# Fix "Malnurished children"
df$param <- gsub("Malnurished", "Undernourished", df$param)
#--------------------------------------------------------------
# Calculate country and country-commodity level kcal availability
# as the per capita values times population
# (This is necessary for subsequent aggregation
# of the kcal availability params to the region level - per cap values will be calculated
# after aggregation)
# Note that kcal availability is reported in IMPACT only every 5 years
# The values for other years are NA
#---
# First country level
dfKcalCty <- df %>% subset(param %in% c("Total Availability\n(kcal/capita/day)", "Population")) %>%
  spread(param, Val) %>% as.data.frame()
dfKcalCty$`Total Availability\n(kcal/day)` <- dfKcalCty$`Total Availability\n(kcal/capita/day)` * dfKcalCty$Population * 10^6
dfKcalCty$`Total Availability\n(kcal/capita/day)` <- NULL
# Save pop df for merge with country-commod level kcal below
dfPop <- dfKcalCty[, c("scenario", "year", "region", "Population")]
dfKcalCty$Population <- NULL
colnames(dfKcalCty)[ncol(dfKcalCty)] <- "Val"
dfKcalCty$param <- "Total Availability\n(kcal/day)"
dfKcalCty <- dfKcalCty[, colnames(df)]
#---
# Now for country-commodity level
dfKcalCommod <- df %>% subset(param == "Availability\n(kcal/capita/day)") %>%
  spread(param, Val) %>% as.data.frame() %>% merge(dfPop, by = c("scenario", "year", "region"))
dfKcalCommod$`Availability\n(kcal/day)` <- dfKcalCommod$`Availability\n(kcal/capita/day)` * dfKcalCommod$Population * 10^6
dfKcalCommod$`Availability\n(kcal/capita/day)` <- NULL
dfKcalCommod$Population <- NULL
colnames(dfKcalCommod)[ncol(dfKcalCommod)] <- "Val"
dfKcalCommod$param <- "Availability\n(kcal/day)"
dfKcalCommod <- dfKcalCommod[, colnames(df)]
#---
# Remove the per cap kcal params from the main df
# (Will be recalculated after aggregation)
df <- subset(df, !(param %in% c("Total Availability\n(kcal/capita/day)",
                                "Availability\n(kcal/capita/day)")))
# Put the new non per cap kcal params together with the main df
thisList <- list(df, dfKcalCty, dfKcalCommod)
df <- as.data.frame(do.call(rbind, thisList))
rm(dfKcalCommod, dfKcalCty)
#--------------------------------------------------------------
# Do same for prices
# I.e. calculate value of production (VoP) and drop prices as they will be
# calculated as VoP / prod after aggregation to region level
dfProd <- df %>% subset(param == "Production") %>%
  rename(Production = Val) %>% select(-"param")
priceVec <- c("Consumer Prices", "Export Prices",
              "Producer Prices", "World Prices")
dfVoP <- df %>% subset(param %in% priceVec) %>%
  merge(dfProd) %>%
  mutate(Val = Val * Production * 1000) %>%
  select(-"Production")
dfVoP$param <- paste("VoP", dfVoP$param)
df <- df %>% subset(!(param %in% priceVec)) %>%
  rbind(dfVoP) %>% as.data.frame()
rm(dfVoP, dfProd)
#--------------------------------------------------------------
# For aggregation it is necessary to separate impact params into
# country-commodity level and country level
commodLevParams <- c("Total Demand", "Other Demand",
                     "Production", "Area", "Animal Numbers",
                     "Availability\n(kcal/day)",
                     "Intermediate Demand",
                     "Livestock Feed Demand",
                     "Export", "Import", "Household Demand",
                     "VoP Consumer Prices",
                     "VoP Export Prices",
                     "VoP Producer Prices",
                     "VoP World Prices")
ctyLevParams <- setdiff(unique(df$param), commodLevParams)
#--------------------------------------------------------------
# Create non-wheat cereals commodity (for commod level params only)
dfOCER <- df %>%
  subset(commodity %in% c("CER", "CER-Wheat") &
           param %in% commodLevParams) %>%
  spread(commodity, Val) %>%
  mutate(Val = CER - `CER-Wheat`) %>%
  mutate(commodity = "Other cereals") %>%
  as.data.frame() %>%
  select(colnames(df))
df <- df %>% subset(commodity != "CER") %>%
  rbind(dfOCER) %>% as.data.frame()
rm(dfOCER)
# Create non-cereal crops commodity category
nonCerCommods <- c("OLS", "R&T", "PUL", "F&V")
dfNonCer <- df %>% subset(commodity %in% nonCerCommods &
                            param %in% commodLevParams) %>%
  group_by(param, scenario, region, year) %>%
  summarise(Val = sum(Val)) %>%
  mutate(commodity = "Non-cereal\ncrops") %>%
  as.data.frame() %>%
  select(colnames(df))
df <- df %>% subset(!(commodity %in% nonCerCommods)) # Drop the other commodities (can always put them back in)
df <- as.data.frame(rbind(df, dfNonCer))
rm(dfNonCer)
df$commodity <- gsub("CER-Wheat", "Wheat", df$commodity)
#--------------------------------------------------------------
# Fix geography
# Separate country and region columns
df$Region <- gsub("\\-.*", "", df$region)
df$Country <- gsub("^.*\\-", "", df$region)
df$region <- NULL
# Rename regions
df$Region[which(df$Region == "SSA")] <- "Africa South\nof the Sahara"
df$Region[which(df$Region == "SAS")] <- "South Asia"
df$Region[which(df$Region == "NAM")] <- "N. America"
df$Region[which(df$Region == "MEN")] <- "West Asia &\nNorth Africa"
df$Region[which(df$Region == "LAC")] <- "Latin America\n& Caribbean"
df$Region[which(df$Region == "FSU")] <- "Russia &\nCentral Asia"
df$Region[which(df$Region == "EUR")] <- "Europe"
df$Region[which(df$Region == "EAP")] <- "East Asia &\nPacific"
df$Region[which(df$Region == "WLD")] <- "World"
# Fine tune region groupings
# Move Ukraine and Belarus from FSU to Europe
df$Region[which(df$Country == "Ukraine")] <- "Europe"
df$Region[which(df$Country == "Belarus")] <- "Europe"
# Move Afghanistan from South Asia to Central Asia
df$Region[which(df$Country == "Afghanistan")] <- "Russia &\nCentral Asia"
# Move Iran from West Asia to Central Asia
df$Region[which(df$Country == "Iran")] <- "Russia &\nCentral Asia"
# Drop Greenland, DVD, EAS, and DVG
df <- subset(df, !(Country %in% c("Greenland", "DVD", "DVG", "EAS")))
# Get rid of default regional aggregates
dropVec <- c("SSA", "EUR", "LAC", "NAM", "MEN", "EAP", "SAS", "FSU")
df <- subset(df, !(Country %in% dropVec))
#--------------------------------------------------------------
# Now have to reaggregate all parameters up to the newly defined regions
# This has to be done separately for country-commodity level and country level params
#---
# First params at country-commodity level
dfAgg1 <- df %>%
  subset(param %in% commodLevParams) %>%
  group_by(param, scenario, commodity, year, Region) %>%
  summarize(Val = sum(Val, na.rm = T)) %>% as.data.frame()
#---
# Calculate yields from crops and animals
# First crops
dfAggYd <- subset(dfAgg1, param %in% c("Area", "Production") &
                    commodity != "AllA")
dfAggYd <- dfAggYd %>% spread(param, Val)
dfAggYd$Yield <- dfAggYd$Production / dfAggYd$Area
dfAggYd$Area <- NULL; dfAggYd$Production <- NULL
colnames(dfAggYd)[ncol(dfAggYd)] <- "Val"
dfAggYd$param <- "Yield"
dfAggYd <- dfAggYd[, colnames(dfAgg1)]
# Then animals
dfAggAnimYd <- subset(dfAgg1, param %in% c("Animal Numbers", "Production") &
                        commodity == "AllA")
dfAggAnimYd <- dfAggAnimYd %>% spread(param, Val)
dfAggAnimYd$`Animal Yield` <- dfAggAnimYd$Production / dfAggAnimYd$`Animal Numbers`
dfAggAnimYd$Area <- NULL; dfAggAnimYd$Production <- NULL
colnames(dfAggAnimYd)[ncol(dfAggAnimYd)] <- "Val"
dfAggAnimYd$param <- "Yield"
dfAggAnimYd <- dfAggAnimYd[, colnames(dfAgg1)]
# Change units of Animal Numbers from head to 1000 head
# to be consistent with Area which is in 1000 hectares
dfAgg1$Val[grep("Animal Numbers", dfAgg1$param)] <-
  dfAgg1$Val[grep("Animal Numbers", dfAgg1$param)] / 1000
#---
# Calculate Import Share of Demand
dfAggISofD <- dfAgg1 %>% subset(param %in% c("Import",
                                             "Total Demand")) %>%
  spread(param, Val) %>% as.data.frame()
dfAggISofD$`Import Share of Demand` <- dfAggISofD$Import / dfAggISofD$`Total Demand`
dfAggISofD$`Total Demand` <- NULL; dfAggISofD$Import <- NULL
colnames(dfAggISofD)[ncol(dfAggISofD)] <- "Val"
dfAggISofD$param <- "Import Share of Demand"
dfAggISofD <- dfAggISofD[, colnames(dfAgg1)]
#---
# Calculate prices
dfProd <- dfAgg1 %>% subset(param == "Production") %>%
  rename(Production = Val) %>% select(-"param")
dfP <- dfAgg1 %>%
  subset(param %in% paste("VoP", priceVec)) %>%
  merge(dfProd) %>%
  mutate(Val = Val / (Production * 1000)) %>%
  select(colnames(dfAgg1))
dfP$param <- gsub("VoP ", "", dfP$param)
dfAgg1 <- dfAgg1 %>%
  subset(!(param %in% paste("VoP", priceVec)))
#---
# Put it together
listDf <- list(dfAgg1, dfAggYd, dfAggAnimYd, dfAggISofD, dfP)
dfAgg1 <- as.data.frame(do.call(rbind, listDf))
rm(dfAggYd, dfAggAnimYd, dfAggISofD, dfP, dfProd, listDf)
#---
# Now params at country level
# Non price country level params are summed
dfAgg2 <- df %>% subset(param %in% ctyLevParams) %>%
  group_by(param, scenario, commodity, year, Region) %>%
  summarize(Val = sum(Val, na.rm = T)) %>% as.data.frame()
# Calculate Share at risk of hunger
# Note that pop at risk of hunger is reported in IMPACT only every 5 years
# The values for other years are NA
dfPaRofH <- dfAgg2 %>%
  subset(param %in% c("Pop at Risk of Hunger", "Population")) %>%
  spread(param, Val) %>% 
  mutate(Val = `Pop at Risk of Hunger` / Population) %>%
  mutate(param = "Share at Risk of Hunger") %>%
  select(colnames(dfAgg2))
# Calculate kcal/capita/day
# Remember kcal reported only every 5 years
dfPop <- dfAgg2 %>% subset(param == "Population") %>%
  rename(Population = Val) %>%
  select(-c("param", "commodity"))
dfKcal <- dfAgg1 %>%
  subset(param == "Availability\n(kcal/day)") %>%
  merge(dfPop) %>%
  mutate(Val = Val / (Population * 10^6)) %>%
  mutate(param = "Availability\n(kcal/capita/day)") %>%
  select(colnames(dfAgg2))
dfKcalTot <- dfAgg2 %>%
  subset(param == "Total Availability\n(kcal/day)" &
           year %in% seq(2025, 2050, 5)) %>%
  merge(dfPop) %>%
  mutate(Val = Val / (Population * 10^6)) %>%
  mutate(param = "Total Availability\n(kcal/capita/day)") %>%
  select(colnames(dfAgg2))
dfAgg2 <- dfAgg2 %>%
  subset(param != "Total Availability\n(kcal/day)")
listDf <- list(dfAgg2, dfKcal, dfKcalTot, dfPaRofH)
dfAgg2 <- as.data.frame(do.call(rbind, listDf))
dfAgg1 <- dfAgg1 %>% subset(param != "Availability\n(kcal/day)")
#---
# Put it together
df <- as.data.frame(rbind(dfAgg1, dfAgg2))
#------------------------------------------------------------------
# Fix commodity names
# u <- df$commodity
# df$commodity[grep("AllA", u)] <- "Animal products"
# df$commodity[which(u == "CER")] <- "Cereals"
# df$commodity[which(u == "CER-Wheat")] <- "Wheat"
# df$commodity[grep("R&T", u)] <- "Roots & tubers"
# df$commodity[grep("OLS", u)] <- "Oilseeds"
# df$commodity[grep("PUL", u)] <- "Pulses"
#------------------------------------------------------------------
# Create scenario names
u <- df$scenario
df$scenario[which(u == "NoWSR_ssp2_rcp45_hgem")] <- "CC No WSR"
df$scenario[which(u == "WSRwrst_ssp2_rcp45_hgem")] <- "CC+WSR (worst case)"
df$scenario[which(u == "WSRbest_ssp2_rcp45_hgem")] <- "CC+WSR (best case)"
# Set year to integer
df$year <- as.integer(df$year)
# Fix prices names
df$param <- gsub("Prices", "price", df$param, ignore.case = F)
#==================================================================
#==================================================================
# End basic processing of IMPACT output
#==================================================================
#==================================================================
#==================================================================
# Graphics illustrating WSR impact on supply, demand, and food security
#==================================================================
# Save graphics to this folder
graphicsFolder <- "E:/BSCHIEK/2Blades WSR IMPACT/New run/Graphics for paper/"
# Set plot parameters
title_size <- 9
subtitle_size <- 8
legendText_size <- 8
axisText_size <- 8
axisTitle_size <- 8
facetTitle_size <- 8
cellText_size <- 2.25
fontParams <- c(axisText_size, facetTitle_size, title_size, cellText_size)
#------------------------------------------------------------------
# First a basic wheat yield plot to make sure that region level yield shocks
# match up with the country level yield shocks that were fed into IMPACT
dfCheckYdShk <- subset(df, param == "Yield" & commodity == "Wheat")
gg <- ggplot(dfCheckYdShk, aes(x = year,
                               y = Val,
                               group = scenario,
                               color = scenario))
gg <- gg + geom_line()
gg <- gg + facet_wrap(~Region, scales = "free_y")
#gg <- gg + labs(title = thisTitle)
gg <- gg + theme_bw()
gg <- gg + theme(strip.background = element_rect(fill = "white"),
                 strip.text = element_text(size = facetTitle_size),
                 axis.title = element_blank(),
                 axis.text.y = element_text(size = axisText_size),
                 axis.text.x = element_text(size = axisText_size, angle = 60, hjust = 1),
                 legend.position = "top",
                 plot.title = element_text(size = title_size))
gg
#==================================================================
# Define fns needed in plotting
#----------------------------------------------------------------
# Generate table multi-year single region (world level)
tabPlot <- function(dfPlotIn,
                    thisTitle = NULL,
                    xAxisOn = T,
                    facetTitleOnX = T,
                    facetTitleOnY = T,
                    fontParams,
                    switchGridAxes = F,
                    cellColorOn = T,
                    yAxisOn = T
){
  axisText_size <- fontParams[1]
  facetTitle_size <- fontParams[2]
  title_size <- fontParams[3]
  cellText_size <- fontParams[4]
  gg <- ggplot(dfPlotIn, aes(x = year, y = commodity,
                             fill = `WSR-No WSR (Difference)`,
                             label = `WSR-No WSR (Difference)`))
  if(cellColorOn){
    gg <- gg + geom_tile(color = "black")
    gg <- gg + scale_fill_gradient2(low = "magenta",
                                    mid = "white",
                                    high = "cyan",
                                    midpoint = 0)
  }else{
    gg <- gg + geom_tile(color = "black", alpha = 0)
  }
  gg <- gg + geom_text(size = cellText_size)
  if(switchGridAxes){
    gg <- gg + facet_grid(Scenario~param)
  }else{
    gg <- gg + facet_grid(param~Scenario)
  }
  if(!is.null(thisTitle)){gg <- gg + labs(title = thisTitle)}
  #gg <- gg + scale_x_continuous(name = "year", limits = c(2025, 2050), breaks = c(2025:2050))
  gg <- gg + theme_bw()
  gg <- gg + theme(strip.background = element_rect(fill = "white"),
                   strip.text = element_text(size = facetTitle_size),
                   axis.title = element_blank(),
                   axis.text.y = element_text(size = axisText_size),
                   axis.text.x = element_blank(),
                   legend.position = "none",
                   panel.grid = element_blank(),
                   plot.title = element_text(size = title_size))
  if(xAxisOn){
    gg <- gg + theme(axis.text.x = element_text(size = axisText_size, angle = 60, hjust = 0.65))
  }
  if(yAxisOn == F){
    gg <- gg + theme(axis.text.y = element_blank(),
                     axis.ticks.y = element_blank())
  }
  if(facetTitleOnX == F){
    gg <- gg + theme(strip.text.x = element_blank())
  }
  if(facetTitleOnY == F){
    gg <- gg + theme(strip.text.y = element_blank())
  }
  return(gg)
}
#----------------------------------------------------------------
# Generate table single year multi-region
tabPlotReg <- function(dfPlotIn,
                       thisTitle = NULL,
                       xAxisOn = T,
                       yAxisOn = T,
                       facetTitleOnX = T,
                       facetTitleOnY = T,
                       fontParams,
                       switchGridAxes = F
){
  axisText_size <- fontParams[1]
  facetTitle_size <- fontParams[2]
  title_size <- fontParams[3]
  cellText_size <- fontParams[4]
  gg <- ggplot(dfPlotIn, aes(x = commodity,
                             y = Region,
                             fill = `WSR-No WSR (Difference)`,
                             label = `WSR-No WSR (Difference)`))
  gg <- gg + geom_tile(color = "black")
  gg <- gg + geom_text(size = cellText_size)
  if(switchGridAxes){
    gg <- gg + facet_grid(Scenario~param) 
  }else{
    gg <- gg + facet_grid(param~Scenario)
  }
  gg <- gg + scale_fill_gradient2(low = "magenta",
                                  mid = "white",
                                  high = "cyan",
                                  midpoint = 0)
  if(!is.null(thisTitle)){gg <- gg + labs(title = thisTitle)}
  gg <- gg + theme_bw()
  gg <- gg + theme(strip.background = element_rect(fill = "white"),
                   strip.text = element_text(size = facetTitle_size),
                   axis.title = element_blank(),
                   axis.text = element_blank(),
                   legend.position = "none",
                   panel.grid = element_blank(),
                   plot.title = element_text(size = title_size))
  if(xAxisOn){
    gg <- gg + theme(axis.text.x = element_text(size = axisText_size))
  }
  if(yAxisOn){
    gg <- gg + theme(axis.text.y = element_text(size = axisText_size))
  }
  if(facetTitleOnX == F){
    gg <- gg + theme(strip.text.x = element_blank())
  }
  if(facetTitleOnY == F){
    gg <- gg + theme(strip.text.y = element_blank())
  }
  return(gg)
}
#----------------------------------------------------------------
# Define function to ensure consistency in processing of the supply
# and demand graphic dfs
# First a sub fn to calculate differences between WSR scenarios and the No-WSR reference scenario
getScenDiffs <- function(dfIn, theseParams, theseCommods, theseYrs, roundTo = 0){
  dfIn <- subset(dfIn, param %in% theseParams &
                   commodity %in% theseCommods &
                   year %in% theseYrs)
  # Calculate difference between WSR and No WSR scenarios
  dfIn <- dfIn %>% spread(scenario, Val) %>% as.data.frame()
  u <- dfIn$`CC+WSR (best case)`
  dfIn$`CC+WSR (best case)`[which(is.na(u))] <- 0
  u <- dfIn$`CC+WSR (worst case)`
  dfIn$`CC+WSR (worst case)`[which(is.na(u))] <- 0
  dfIn$`Best case` <- dfIn$`CC+WSR (best case)` - dfIn$`CC No WSR`
  dfIn$`Worst case` <- dfIn$`CC+WSR (worst case)` - dfIn$`CC No WSR`
  # dfIn$`Best case (%)` <- 100 * (dfIn$`CC+WSR (best case)` / dfIn$`CC No WSR` - 1)
  # dfIn$`Worst case (%)` <- 100 * (dfIn$`CC+WSR (worst case)` / dfIn$`CC No WSR` - 1)
  dfIn$`CC No WSR` <- NULL
  dfIn$`CC+WSR (best case)` <- NULL
  dfIn$`CC+WSR (worst case)` <- NULL
  # dfInPct <- dfIn %>% select(!(`Best case`:`Worst case`))  %>%
  #   gather(Scenario, `WSR-No WSR (% Difference)`, `Best case (%)`:`Worst case (%)`)
  # dfInPct$`WSR-No WSR (% Difference)` <- round(dfInPct$`WSR-No WSR (% Difference)`, 4)
  # hist(dfInPct$`WSR-No WSR (% Difference)`, breaks = 65)
  # dfIn <- dfIn %>% select(!(`Best case (%)`:`Worst case (%)`)) %>% 
  #   gather(Scenario, `WSR-No WSR (Difference)`, `Best case`:`Worst case`)
  dfIn <- dfIn %>% gather(Scenario, `WSR-No WSR (Difference)`, `Best case`:`Worst case`)
  #dfIn$`WSR-No WSR (Difference)`[grep("Yield", dfIn$param)] <- 1000 * dfIn$`WSR-No WSR (Difference)`[grep("Yield", dfIn$param)]
  dfIn$`WSR-No WSR (Difference)` <- round(dfIn$`WSR-No WSR (Difference)`, roundTo)
  #---
  return(dfIn)
}
#----------------------------------------------------------------
# Now a more general processing fn which uses the prev fn
prep4plotSUPorDEM <- function(dfIn, theseParams, theseCommods, theseYrs){
  # Calculate differences between WSR scenarios and the No-WSR reference scenario
  dfIn <- getScenDiffs(dfIn, theseParams, theseCommods, theseYrs)
  #----------------------------------------------------------------
  # Calculate total crops
  dfTot <- dfIn %>% group_by(param, year, Region, Scenario) %>%
    summarise(`WSR-No WSR (Difference)` = sum(`WSR-No WSR (Difference)`)) %>%
    as.data.frame()
  dfTot$commodity <- "Total crops"
  dfTot <- dfTot[, colnames(dfIn)]
  dfCer <- subset(dfIn, commodity %in% c("Wheat", "Other cereals"))
  dfIn <- as.data.frame(do.call(rbind, list(dfIn, dfTot)))
  #----------------------------------------------------------------
  # # Create world level (UNLESS ALREADY CREATED IN BASIC PROCESSING ABOVE)
  # dfWld <- dfIn %>% group_by(param, commodity, year, Scenario) %>%
  #   summarise(`WSR-No WSR (Difference)` = sum(`WSR-No WSR (Difference)`)) %>%
  #   as.data.frame()
  # dfWld$Region <- "World"
  # dfWld <- dfWld[, colnames(dfIn)]
  # dfOut <- as.data.frame(rbind(dfIn, dfWld))
  #----------------------------------------------------------------
  dfOut <- dfIn
  return(dfOut)
}
#==================================================================
# Supply side impact graphics
# Get the df required
theseYrs <- 2025:2050
theseParams <- c("Area", "Production")
theseCommods <- c("Wheat", "Other cereals", "Non-cereal\ncrops") # Leave out animal products (WSR impact on animal prods is negligle anyway)
dfSup <- prep4plotSUPorDEM(df, theseParams, theseCommods, theseYrs)
#----------------------------------------------------------------
# Plot supply tables
dfPlot <- dfSup
dfPlot$param[grep("Production", dfPlot$param)] <- "Production\n(1000 metric tons)"
dfPlot$param[grep("Area", dfPlot$param)] <- "Area\n(1000 hectares)"
# First the global picture area and production best and worst case
dfTab <- subset(dfPlot, Region == "World")
dfTab$year <- as.character(dfTab$year)
# For world level better switch production to units of million MT
ind <- grep("Production", dfTab$param)
dfTab$`WSR-No WSR (Difference)`[ind] <- round(dfTab$`WSR-No WSR (Difference)`[ind] * 10^-3, 1)
dfTab$param[ind] <- "Production\n(Million metric tons)"
dfTabTot <- subset(dfTab, commodity == "Total crops")
dfTab <- subset(dfTab, commodity != "Total crops")
theseParams <- unique(dfTab$param)
theseScens <- unique(dfTab$Scenario)
nParams <- length(theseParams)
nScens <- length(theseScens)
list_ggi <- list()
for(i in 1:nScens){
  thisScen <- theseScens[i]
  list_ggj <- list()
  for(j in 1:nParams){
    thisParam <- theseParams[j]
    this_dfTab <- subset(dfTab, param == thisParam &
                           Scenario == thisScen)
    if(j == 1){facetTitleOnX <- T}else{facetTitleOnX <- F}
    ggParam <- tabPlot(this_dfTab,
                       thisTitle = NULL,
                       xAxisOn = F,
                       facetTitleOnX,
                       facetTitleOnY = T,
                       fontParams)
    this_dfTabTot <- subset(dfTabTot, param == thisParam &
                              Scenario == thisScen)
    if(j == 2 & i == 1){xAxisOn <- T}else{xAxisOn <- F}
    ggParamTot <- tabPlot(this_dfTabTot,
                          thisTitle = NULL,
                          xAxisOn,
                          facetTitleOnX = F,
                          facetTitleOnY = F,
                          fontParams)
    ggOut <- ggParam + ggParamTot + plot_layout(ncol = 1, heights = c(3, 1))
    list_ggj[[j]] <- ggOut
  }
  ggj <- wrap_plots(list_ggj, ncol = 1)
  if(i == 1){list_ggi <- list(ggj)}else{
    list_ggi <- c(list(ggj), list_ggi)}
  
  # if(i == 1){list_ggi <- list_ggj}else{
  #   list_ggi <- c(list_ggj, list_ggi)}
}
thisTitle <- "Wheat stem rust impact on global crop supply 2025-2050, best and worst case\nExpressed as difference in magnitude (WSR - No WSR)"
wrap_plots(list_ggi, ncol = 1) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_supWorld.png")
ggsave(thisFilePath,
       width = 8, height = 8)
#---
# # Cumulative summary
# dfWldCum <- dfPlot %>% subset(Region == "World") %>%
#   group_by(param, commodity, Scenario) %>%
#   summarise(`WSR-No WSR (Difference)` = sum(`WSR-No WSR (Difference)`)) %>%
#   as.data.frame()
#---
# Get means over 2025-2050 for mention in paper
dfWldAvg <- dfPlot %>% subset(Region == "World")
ind <- grep("Production", dfWldAvg$param)
dfWldAvg$`WSR-No WSR (Difference)`[ind] <- round(dfWldAvg$`WSR-No WSR (Difference)`[ind] * 10^-3, 4)
dfWldAvg$param[ind] <- "Production\n(Million metric tons)"
dfWldAvg <- dfWldAvg %>% group_by(param, commodity, Scenario) %>%
  summarise(`Mean WSR-No WSR (Difference)` = mean(`WSR-No WSR (Difference)`),
            `Max WSR-No WSR (Difference)` = max(`WSR-No WSR (Difference)`),
            `Min WSR-No WSR (Difference)` = min(`WSR-No WSR (Difference)`)) %>%
  as.data.frame()
#---
# Having idenditifed critical years look at regions for those year(s)
# Let's look at 2036
dfTab <- subset(dfPlot, year == 2036 & Region != "World" &
                  commodity != "Total crops")
dfTabWld <- subset(dfPlot, year == 2036 & Region == "World" &
                     commodity != "Total crops")
theseParams <- unique(dfTab$param)
fontParams[length(fontParams)] <- 3 #Increase cell text size
list_ggi <- list()
for(i in 1:nScens){
  thisScen <- theseScens[i]
  list_ggj <- list()
  for(j in 1:nParams){
    thisParam <- theseParams[j]
    this_dfTab <- subset(dfTab, param == thisParam &
                           Scenario == thisScen)
    if(j == 1){facetTitleOnX <- T}else{facetTitleOnX <- F}
    if(i == 1){facetTitleOnY <- T; yAxisOn <- F}
    else{facetTitleOnY <- F; yAxisOn <- T}
    ggParam <- tabPlotReg(this_dfTab,
                          thisTitle = NULL,
                          xAxisOn = F,
                          yAxisOn,
                          facetTitleOnX,
                          facetTitleOnY,
                          fontParams)
    this_dfTabWld <- subset(dfTabWld, param == thisParam &
                              Scenario == thisScen)
    if(j == 2){xAxisOn <- T}else{xAxisOn <- F}
    ggParamWld <- tabPlotReg(this_dfTabWld,
                             thisTitle = NULL,
                             xAxisOn,
                             yAxisOn,
                             facetTitleOnX = F,
                             facetTitleOnY = F,
                             fontParams)
    ggOut <- ggParam + ggParamWld + plot_layout(ncol = 1, heights = c(8, 1))
    list_ggj[[j]] <- ggOut
  }
  ggj <- wrap_plots(list_ggj, ncol = 1)
  if(i == 1){list_ggi <- list(ggj)}else{
    list_ggi <- c(list(ggj), list_ggi)}
  
}
thisTitle <- "Wheat stem rust impact on crop supply by region in 2036, best and worst case\nExpressed as difference in magnitude (WSR - No WSR)"
wrap_plots(list_ggi, ncol = 2) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_supReg.png")
ggsave(thisFilePath,
       width = 6, height = 7)
#-----------------------------------------------------------------
# Supply side prices (producer and export prices)
# In caption or title should be mentioned that prices are in 2005 USD
thesePrices <- c("Producer price",
                 "Export price")
dfP <- getScenDiffs(df,
                    thesePrices,
                    theseCommods, theseYrs, roundTo = 2)
dfP$year <- as.character(dfP$year)
# gg <- ggplot(dfP, aes(x = year, y = `WSR-No WSR (Difference)`,
#              group = commodity, color = commodity)) +
#   geom_line() + facet_grid(Scenario~Region, scales = "free_y")
# gg
dfTab <- subset(dfP, Region == "World" &
                   Scenario == "Best case")
fontParams[length(fontParams)] <- cellText_size
ggB <- tabPlot(dfTab,
        thisTitle = NULL,
        xAxisOn = T,
        facetTitleOnX = T,
        facetTitleOnY = T,
        fontParams)
dfTab <- subset(dfP, Region == "World" &
                   Scenario == "Worst case")
ggW <- tabPlot(dfTab,
               thisTitle = NULL,
               xAxisOn = F,
               facetTitleOnX = T,
               facetTitleOnY = T,
               fontParams)
thisTitle <- "Wheat stem rust impact on world producer and export prices 2025-2050, best and worst case\nExpressed as difference in 2005 USD (WSR price - No WSR price)"
# Figure caption should explain that price calculated as value of prod / prod
wrap_plots(list(ggW, ggB), ncol = 1) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_supPricesWorld.png")
ggsave(thisFilePath,
       width = 8, height = 5)
#---
# Regionally disaggregated price plot focusing on single year
dfPlot <- subset(dfP, year == "2036")
fontParams[1] <- 7 # Decrease axisText_size
thisTitle <- "Wheat stem rust impact on regional producer and export prices in 2036\nBest and worst case\nExpressed as difference in 2005 USD (WSR price - No WSR price)"
ggPreg <- tabPlotReg(dfPlot,
           thisTitle,
                       xAxisOn = T,
                       yAxisOn = T,
                       facetTitleOnX = T,
                       facetTitleOnY = T,
                       fontParams)
# wrap_plots(list_ggi, ncol = 2) + plot_annotation(title = thisTitle) &
#   theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_supPricesReg.png")
ggsave(thisFilePath,
       width = 5.5, height = 5)
#==================================================================
# Demand side impact graphics
# theseParams <- c("Household Demand", "Livestock Feed Demand",
#                  "Intermediate Demand", "Other Demand", "Export",
#                  "Total Demand")
theseParams <- c("Export", "Total Demand")
dfDem <- prep4plotSUPorDEM(df, theseParams, theseCommods,
                           theseYrs)
dfDem$param <- gsub("Total Demand", "Total\nDemand", dfDem$param)
#---
# Get summary stats over 2025-2050 for mention in paper
dfWldAvg <- dfDem %>% group_by(param, commodity, Scenario) %>%
  summarise(`Mean WSR-No WSR` = mean(`WSR-No WSR (Difference)`, na.rm = T),
            `Max WSR-No WSR` = max(`WSR-No WSR (Difference)`, na.rm = T),
            `Min WSR-No WSR` = min(`WSR-No WSR (Difference)`, na.rm = T)) %>%
  as.data.frame()
#-----------------------------------------------------------------
# dfPlot <- subset(dfDem, Region == "World" &
#                    param %in% c("Household Demand", "Total Demand"))
# # For world level better switch to units of million MT
# dfPlot$`WSR-No WSR (Difference)` <- round(dfPlot$`WSR-No WSR (Difference)` * 10^-3, 1)
dfTab <- subset(dfDem, Region == "World")
dfTab[is.na(dfTab)] <- 0
dfTab$`WSR-No WSR (Difference)` <- round(dfTab$`WSR-No WSR (Difference)` * 10^-3, 1)
dfTab$year <- as.character(dfTab$year)
dfTabTot <- subset(dfTab, commodity == "Total crops")
dfTab <- subset(dfTab, commodity != "Total crops")
theseParams <- unique(dfTab$param)
theseScens <- unique(dfTab$Scenario)
nParams <- length(theseParams)
nScens <- length(theseScens)
fontParams[length(fontParams)] <- cellText_size
fontParams[1] <- 7
# thisTitleVec <- paste("Wheat stem rust impact on global crop demand 2025-2050,",
#                       c("best", "worst"),
#                       "case\nExpressed as difference in magnitude (WSR - No WSR, million metric tons)")
list_ggi <- list()
for(i in 1:nScens){
  thisScen <- theseScens[i]
  list_ggj <- list()
  for(j in 1:nParams){
    thisParam <- theseParams[j]
    this_dfTab <- subset(dfTab, param == thisParam &
                           Scenario == thisScen)
    if(j == 1){facetTitleOnX <- T}else{facetTitleOnX <- F}
    ggParam <- tabPlot(this_dfTab,
                       thisTitle = NULL,
                       xAxisOn = F,
                       facetTitleOnX,
                       facetTitleOnY = T,
                       fontParams)
    this_dfTabTot <- subset(dfTabTot, param == thisParam &
                              Scenario == thisScen)
    #if(j == nParams){xAxisOn <- T}else{xAxisOn <- F}
    if(j == nParams & i == 1){xAxisOn <- T}else{xAxisOn <- F}
    ggParamTot <- tabPlot(this_dfTabTot,
                          thisTitle = NULL,
                          xAxisOn,
                          facetTitleOnX = F,
                          facetTitleOnY = F,
                          fontParams)
    ggOut <- ggParam + ggParamTot +
      plot_layout(ncol = 1, heights = c(3, 1))
    list_ggj[[j]] <- ggOut
  }
  ggj <- wrap_plots(list_ggj, ncol = 1) #+
    # plot_annotation(title = thisTitleVec[i]) &
    # theme(plot.title = element_text(size = title_size))
  if(i == 1){list_ggi <- list(ggj)}else{
    list_ggi <- c(list(ggj), list_ggi)}
  # if(i == 1){list_ggi <- list_ggj}else{
  #   list_ggi <- c(list_ggj, list_ggi)}
}
# list_ggi[[1]]
# thisFilePath <- paste0(graphicsFolder, "Table_demWorldWorst.png")
# ggsave(thisFilePath, width = 8, height = 8)
# list_ggi[[2]]
# thisFilePath <- paste0(graphicsFolder, "Table_demWorldBest.png")
# ggsave(thisFilePath, width = 8, height = 8)
thisTitle <- "Wheat stem rust impact on global crop demand 2025-2050, best and worst case\nExpressed as difference in million metric tons (WSR - No WSR)"
wrap_plots(list_ggi, ncol = 1) +
  plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_demWorld.png")
ggsave(thisFilePath, width = 8, height = 6)
#-----------------------------------------------------------------
# Focus on specific year
dfTab <- subset(dfDem, year == 2036 & Region != "World" &
                  commodity != "Total crops")
dfTabWld <- subset(dfDem, year == 2036 & Region == "World" &
                     commodity != "Total crops")
#fontParams[length(fontParams)] <- 3 #Increase cell text size
theseParams <- unique(dfTab$param)
list_ggi <- list()
for(i in 1:nScens){
  thisScen <- theseScens[i]
  list_ggj <- list()
  for(j in 1:nParams){
    thisParam <- theseParams[j]
    this_dfTab <- subset(dfTab, param == thisParam &
                           Scenario == thisScen)
    if(j == 1){facetTitleOnX <- T}else{facetTitleOnX <- F}
    if(i == 1){facetTitleOnY <- T; yAxisOn <- F}
    else{facetTitleOnY <- F; yAxisOn <- T}
    ggParam <- tabPlotReg(this_dfTab,
                          thisTitle = NULL,
                          xAxisOn = F,
                          yAxisOn,
                          facetTitleOnX,
                          facetTitleOnY,
                          fontParams)
    this_dfTabWld <- subset(dfTabWld, param == thisParam &
                              Scenario == thisScen)
    if(j == nParams){xAxisOn <- T}else{xAxisOn <- F}
    ggParamWld <- tabPlotReg(this_dfTabWld,
                             thisTitle = NULL,
                             xAxisOn,
                             yAxisOn,
                             facetTitleOnX = F,
                             facetTitleOnY = F,
                             fontParams)
    ggOut <- ggParam + ggParamWld + plot_layout(ncol = 1, heights = c(8, 1))
    list_ggj[[j]] <- ggOut
  }
  ggj <- wrap_plots(list_ggj, ncol = 1)
  if(i == 1){list_ggi <- list(ggj)}else{
    list_ggi <- c(list(ggj), list_ggi)}
  
}

thisTitle <- "Wheat stem rust impact on crop demand by region in 2036, best and worst case\nExpressed as difference in million metric tons (WSR - No WSR)"
wrap_plots(list_ggi, ncol = 2) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_demReg.png")
ggsave(thisFilePath,
       width = 6, height = 5)
#-----------------------------------------------------------------
# Demand side price (consumer price)
# In caption or title should be mentioned that prices are in 2005 USD
thesePrices <- c("Consumer price")
dfP <- getScenDiffs(df,
                    thesePrices,
                    theseCommods, theseYrs, roundTo = 2)
dfP$year <- as.character(dfP$year)
# gg <- ggplot(dfP, aes(x = year, y = `WSR-No WSR (Difference)`,
#              group = commodity, color = commodity)) +
#   geom_line() + facet_grid(Scenario~Region, scales = "free_y")
# gg
dfTab <- subset(dfP, Region == "World")# &
#                  Scenario == "Best case")
fontParams[length(fontParams)] <- cellText_size
# gg <- ggplot(dfTab, aes(x = year,
#                            y = commodity,
#                            fill = `WSR-No WSR (Difference)`,
#                            label = `WSR-No WSR (Difference)`))
# gg <- gg + geom_tile(color = "black")
# gg <- gg + geom_text(size = cellText_size)
# gg <- gg + facet_grid(Scenario~param)
# gg <- gg + scale_fill_gradient2(low = "magenta",
#                                 mid = "white",
#                                 high = "cyan",
#                                 midpoint = 0)
# if(!is.null(thisTitle)){gg <- gg + labs(title = thisTitle)}
# #gg <- gg + scale_x_continuous(name = "year", limits = c(2025, 2050), breaks = c(2025:2050))
# gg <- gg + theme_bw()
# gg <- gg + theme(strip.background = element_rect(fill = "white"),
#                  strip.text = element_text(size = facetTitle_size),
#                  axis.title = element_blank(),
#                  axis.text.y = element_text(size = axisText_size),
#                  axis.text.x = element_blank(),
#                  legend.position = "none",
#                  panel.grid = element_blank(),
#                  plot.title = element_text(size = title_size))
# if(xAxisOn){
#   gg <- gg + theme(axis.text.x = element_text(size = axisText_size, angle = 60, hjust = 0.65))
# }
# if(facetTitleOnX == F){
#   gg <- gg + theme(strip.text.x = element_blank())
# }
# if(facetTitleOnY == F){
#   gg <- gg + theme(strip.text.y = element_blank())
# }

gg <- tabPlot(dfTab,
               thisTitle = NULL,
               xAxisOn = T,
               facetTitleOnX = T,
               facetTitleOnY = T,
               fontParams,
               switchGridAxes = T)
# dfTab <- subset(dfP, Region == "World" &
#                   Scenario == "Worst case")
# ggW <- tabPlot(dfTab,
#                thisTitle = NULL,
#                xAxisOn = F,
#                facetTitleOnX = T,
#                facetTitleOnY = T,
#                fontParams)
thisTitle <- "Wheat stem rust impact on world consumer prices 2025-2050, best and worst case\nExpressed as difference in 2005 USD (WSR price - No WSR price)"
# Figure caption should explain that price calculated as value of prod / prod
# wrap_plots(list(ggW, ggB), ncol = 1) + plot_annotation(title = thisTitle) &
#   theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_demPricesWorld.png")
ggsave(thisFilePath,
       width = 8, height = 4)
#---
# Regionally disaggregated price plot focusing on single year
dfPlot <- subset(dfP, year == "2036")
fontParams[1] <- 7 # Decrease axisText_size
thisTitle <- "Wheat stem rust impact on regional consumer prices in 2036\nBest and worst case\nExpressed as difference in 2005 USD (WSR price - No WSR price)"
ggPreg <- tabPlotReg(dfPlot,
                     thisTitle,
                     xAxisOn = T,
                     yAxisOn = T,
                     facetTitleOnX = T,
                     facetTitleOnY = T,
                     fontParams,
                     switchGridAxes = T)
# wrap_plots(list_ggi, ncol = 2) + plot_annotation(title = thisTitle) &
#   theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_demPricesReg.png")
ggsave(thisFilePath,
       width = 3, height = 5)

#==================================================================
# Food security impact graphics
theseParams <- c("Undernourished Children",
                 "Share at Risk of Hunger",
                 "Pop at Risk of Hunger",
                 "Total Availability\n(kcal/capita/day)")
dfFsec <- getScenDiffs(df, theseParams,
                       theseCommods = "-",
                       theseYrs, roundTo = 3)
#---
gg <- ggplot(dfFsec,
             aes(x = year, y = Region,
                 fill = `WSR-No WSR (Difference)`,
                 label = `WSR-No WSR (Difference)`))
gg <- gg + geom_tile()
gg <- gg + geom_text()
gg <- gg + facet_grid(param~Scenario)
gg
#---
theseParams <- c("Import Share of Demand",
                 "Availability\n(kcal/capita/day)")
dfFsec <- getScenDiffs(df, theseParams,
                       theseCommods,
                       theseYrs, roundTo = 3)

# # Get summary stats over 2025-2050 for mention in paper
# dfWldAvg <- dfFsec %>% group_by(param, commodity, Scenario) %>%
#   summarise(`Mean WSR-No WSR` = mean(`WSR-No WSR (Difference)`, na.rm = T),
#             `Max WSR-No WSR` = max(`WSR-No WSR (Difference)`, na.rm = T),
#             `Min WSR-No WSR` = min(`WSR-No WSR (Difference)`, na.rm = T)) %>%
#   as.data.frame()

#================================================================
# Alternative approach: mixed supply and demand side graphic
theseParams <- c("Area", "Production", "Yield",
                 "Producer price",
                 "Total Demand", "Export")
theseCommods <- c("Wheat")#, "Other cereals", "Non-cereal\ncrops") # Leave out animal products (WSR impact on animal prods is negligle anyway)
dfSupDem <- getScenDiffs(df, theseParams, theseCommods, theseYrs, roundTo = 4)
#----------------------------------------------------------------
# Plot supply tables
dfPlot <- dfSupDem
dfPlot$param[grep("Production", dfPlot$param)] <- "Production\n(1000 metric tons)"
dfPlot$param[grep("Area", dfPlot$param)] <- "Area\n(1000 hectares)"
indYd <- grep("Yield", dfPlot$param)
dfPlot$`WSR-No WSR (Difference)`[indYd] <-
  1000 * dfPlot$`WSR-No WSR (Difference)`[indYd]
dfPlot$param[indYd] <- "Yield\n(kg/hectare)"
# First the global picture area and production best and worst case
dfTab <- subset(dfPlot, Region == "World")
dfTab$year <- as.character(dfTab$year)
# For world level better switch production to units of million MT
ind <- grep("Production", dfTab$param)
dfTab$`WSR-No WSR (Difference)`[ind] <- round(dfTab$`WSR-No WSR (Difference)`[ind] * 10^-3, 1)
dfTab$param[ind] <- "Production\n(Million metric tons)"
dfTab$`WSR-No WSR (Difference)` <- round(dfTab$`WSR-No WSR (Difference)`, 1)
gg <- tabPlot(dfTab,
                    thisTitle = NULL,
                    xAxisOn = T,
                    facetTitleOnX = T,
                    facetTitleOnY = T,
                    fontParams,
                    switchGridAxes = F,
              cellColorOn = F,
              yAxisOn = T
)
#
theseParams <- unique(dfTab$param)
theseScens <- unique(dfTab$Scenario)
nParams <- length(theseParams)
nScens <- length(theseScens)
list_gg <- list()
for(i in 1:nScens){
  thisScen <- theseScens[i]
  this_dfTab <- subset(dfTab, Scenario == thisScen)
  facetTitleOnX <- T
  if(i == 2){xAxisOn <- T}
  gg <- tabPlot(this_dfTab,
                     thisTitle = NULL,
                     xAxisOn = F,
                     facetTitleOnX,
                     facetTitleOnY = T,
                     fontParams,
                switchGridAxes = F,
                cellColorOn = F,
                yAxisOn = F)
  list_gg[[i]] <- gg
  
  
  # list_ggj <- list()
  # for(j in 1:nParams){
  #   thisParam <- theseParams[j]
  #   this_dfTab <- subset(dfTab, param == thisParam &
  #                          Scenario == thisScen)
  #   if(j == 1){facetTitleOnX <- T}else{facetTitleOnX <- F}
  #   ggParam <- tabPlot(this_dfTab,
  #                      thisTitle = NULL,
  #                      xAxisOn = F,
  #                      facetTitleOnX,
  #                      facetTitleOnY = T,
  #                      fontParams)
  #   # this_dfTabTot <- subset(dfTabTot, param == thisParam &
  #   #                           Scenario == thisScen)
  # #   if(j == 2 & i == 1){xAxisOn <- T}else{xAxisOn <- F}
  # #   ggParamTot <- tabPlot(this_dfTabTot,
  # #                         thisTitle = NULL,
  # #                         xAxisOn,
  # #                         facetTitleOnX = F,
  # #                         facetTitleOnY = F,
  # #                         fontParams)
  # #   ggOut <- ggParam + ggParamTot + plot_layout(ncol = 1, heights = c(3, 1))
  #   ggOut <- ggParam
  #    list_ggj[[j]] <- ggOut
  #  }
  # ggj <- wrap_plots(list_ggj, ncol = 1) & theme(plot.margin = 1)
  # if(i == 1){list_ggi <- list(ggj)}else{
  #   list_ggi <- c(list(ggj), list_ggi)}
  
  # if(i == 1){list_ggi <- list_ggj}else{
  #   list_ggi <- c(list_ggj, list_ggi)}
}

theseParams <- c("Household Demand", "Export",
                 "Total Demand")
# theseParams <- c("Export", "Total Demand")
dfDem <- prep4plotSUPorDEM(df, theseParams, theseCommods = "Wheat",
                           theseYrs)
dfDem <- 

dfDem$param <- gsub("Total Demand", "Total\nDemand", dfDem$param)

dfBar <- subset(dfDem, Region == "World" &
                  param != "Total\nDemand")
dfBar$`WSR-No WSR (Difference)` <- round(dfBar$`WSR-No WSR (Difference)` * 10^-3, 1)
colnames(dfBar)[ncol(dfBar)] <- "WSR-No WSR\n(Million metric tons)"
thisTitle <- "Wheat stem rust impact on global crop demand 2025-2050, best and worst case\nExpressed as difference in magnitude (WSR - No WSR)"
theseColors <- randomcoloR::distinctColorPalette(k = length(unique(dfBar$param)))

ggDemWrst <- plotDemBars(subset(dfBar, Scenario == "Worst case"), theseColors, fontParams)
ggDemBest <- plotDemBars(subset(dfBar, Scenario == "Best case"), theseColors, fontParams, legendOn = T, axisTextOnX = T)

p_lab <- ggplot() +
  annotate(geom = "text", x = 1, y = 1,
           label = "WSR-No WSR (million metric tons)", angle = 90,
           size = 3) +
  coord_cartesian(clip = "off") + theme_void()

(p_lab | wrap_plots(list(ggDemWrst, ggDemBest), nrow = 2)) +
  plot_layout(widths = c(.1, 1)) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
#---
# Save
thisFilePath <- paste0(graphicsFolder, "Bar_demWorld.png")
ggsave(thisFilePath,
       width = 8, height = 8)




#list_gg <- c(list_gg, list_ggDem)
thisTitle <- "Wheat stem rust impact on global wheat supply and demand 2025-2050, best and worst case\nExpressed as difference in magnitude (WSR - No WSR)"
wrap_plots(list_gg, ncol = 1) + plot_annotation(title = thisTitle) &
  theme(plot.title = element_text(size = title_size))
thisFilePath <- paste0(graphicsFolder, "Table_supDemWorld.png")
ggsave(thisFilePath,
       width = 8, height = 8)



#































# # Aggregate other demand and intermediate demand to single category
# dfDem$param[grep("Intermediate", dfDem$param)] <- "Other Demand"
# dfDem <- dfDem %>% group_by(param, commodity, year, Region, Scenario) %>%
#   summarise(`WSR-No WSR (Difference)` = sum(`WSR-No WSR (Difference)`)) %>%
#   as.data.frame()
# Fix names so that they appear on graphs ok
# dfDem$commodity[grep("Other cereals", dfDem$commodity)] <- "Other\ncereals"
# dfDem$param[grep("Livestock", dfDem$param)] <- "Livestock\nFeed Demand"
#-----------------------------------------------------------------
# Because demand params are all of same type and units can use bar chart
# (Couldn't do this with supply params because production and area are different types and units)
# Bar chart captures everything succinctly with simple code

# plotDemBars <- function(dfBar,
#                         theseColors,
#                         fontParams,
#                         legendOn = F,
#                         axisTextOnX = F){
#   axisText_size <- fontParams[1]
#   facetTitle_size <- fontParams[2]
#   title_size <- fontParams[3]
#   thisCommodOrder <- c("Wheat", "Other\ncereals",
#                        "Non-cereal\ncrops", "Total crops")
#   gg <- ggplot(dfBar, aes(x = year,
#                           y = `WSR-No WSR\n(Million metric tons)`))
#   gg <- gg + geom_bar(stat = "identity", aes(fill = param))
#   gg <- gg + scale_x_continuous(breaks = seq(2025, 2050, 1))
#   gg <- gg + facet_grid(factor(commodity, levels = thisCommodOrder)~Scenario, scales = "free_y")
#   gg <- gg + scale_fill_manual(values = theseColors)
#   gg <- gg + geom_hline(yintercept = 0, color = "violet")
#   #gg <- gg + labs(title = thisTitle)
#   gg <- gg + theme_bw()
#   gg <- gg + theme(strip.background = element_rect(fill = "white"),
#                    strip.text = element_text(size = facetTitle_size),
#                    axis.title = element_blank(),
#                    axis.text.y = element_text(size = axisText_size),
#                    axis.text.x = element_blank(),
#                    legend.position = "none",
#                    plot.title = element_text(size = title_size))
#   if(legendOn){
#     gg <- gg + theme(legend.position = "bottom",
#                      legend.title = element_blank(),
#                      legend.text = element_text(size = legendText_size))
#   }
#   if(axisTextOnX){
#     gg <- gg + theme(axis.text.x = element_text(size = axisText_size, angle = 60, hjust = 1))
#   }
#   
#   return(gg)
#   
# }
